ABSTRACT :

This project presents the design and development of an Automated Student Enrollment and Documentation System, a full-stack web application built to streamline the registration process for the Central Institute of Tool Design (CITD). The system architecture is centered around a Node.js and Express.js backend that orchestrates a multi-stage workflow triggered by a single student submission via a user-friendly HTML5 form. The application automates the entire lifecycle from data entry to final documentation, solving critical administrative bottlenecks.

The project leverages a suite of powerful server-side libraries for its core functionalities. Puppeteer is utilized for high-fidelity, dynamic PDF generation of both student certificates and application forms, ensuring pixel-perfect document rendering. ExcelJS provides persistent data logging by creating and updating a master registration spreadsheet, while Nodemailer handles all automated email communications. A key innovation is the implementation of a node-cron based scheduling agent, which consolidates all faculty notifications into batched email reports sent at predefined daily intervals, preventing email fatigue and improving administrative efficiency.

This project successfully demonstrates a robust and scalable solution for a real-world institutional workflow challenge. By automating document creation, data management, and communication, the system significantly reduces manual workload, minimizes human error, and ensures timely, professional correspondence. The Automated Enrollment System serves as a powerful model for digitizing and streamlining administrative processes in educational and corporate environments.





Project Report
Automated Enrollment and Documentation System
Central Institute of Tool Design (CITD), Hyderabad
Submitted By:
[Your Name Here]

Date:
September 16, 2025

Abstract
This project presents the design and development of an Automated Student Enrollment and Documentation System, a full-stack web application built to streamline the registration process for the Central Institute of Tool Design (CITD). The system architecture is centered around a Node.js and Express.js backend that orchestrates a multi-stage workflow triggered by a single student submission via a user-friendly HTML5 form. The application automates the entire lifecycle from data entry to final documentation, solving critical administrative bottlenecks.

The project leverages a suite of powerful server-side libraries for its core functionalities. Puppeteer is utilized for high-fidelity, dynamic PDF generation of both student certificates and application forms, ensuring pixel-perfect document rendering. ExcelJS provides persistent data logging by creating and updating a master registration spreadsheet, while Nodemailer handles all automated email communications. A key innovation is the implementation of a node-cron based scheduling agent, which consolidates all faculty notifications into batched email reports sent at predefined daily intervals, preventing email fatigue and improving administrative efficiency.

This project successfully demonstrates a robust and scalable solution for a real-world institutional workflow challenge. By automating document creation, data management, and communication, the system significantly reduces manual workload, minimizes human error, and ensures timely, professional correspondence. The Automated Enrollment System serves as a powerful model for digitizing and streamlining administrative processes in educational and corporate environments.

1. Introduction & Objectives
The traditional method of student registration at many institutions relies on manual, paper-based processes. This approach is often time-consuming, prone to human error, and results in significant administrative overhead. The primary goal of this project was to address these challenges at CITD by developing a comprehensive, automated solution.

The key objectives of the Automated Enrollment System are:

To Digitize Data Entry: Replace the physical application form with a user-friendly, public-facing web form accessible on any device.

To Automate Document Generation: Instantly create professional, pixel-perfect PDF copies of the student's official certificate and their completed application form.

To Centralize Record-Keeping: Automatically update a master Excel spreadsheet with every new registration, creating a persistent and easily accessible database.

To Streamline Communication:

Provide immediate email confirmation to students upon successful registration.

Implement an intelligent batching system to send consolidated reports to faculty at scheduled times, preventing email overload.

To Enhance Efficiency: Drastically reduce the manual workload for administrative staff, minimize data entry errors, and ensure all parties receive consistent, timely documentation.

2. System Architecture and Workflow
The application operates on a modern client-server model. The entire workflow is automated and triggered by a single user action.

Workflow Diagram:

The process is as follows:

Student Submission: A student accesses the application form via a web link and fills in their details, including personal information, educational qualifications, and a photograph.

Data Transmission: Upon submission, the frontend JavaScript captures all form data and sends it securely to the backend server.

Backend Processing: The Node.js server receives the data and initiates a multi-stage process:
a. PDF Generation: It uses Puppeteer to create two PDF files: the certificate and the application form, dynamically populating them with the student's data.
b. Database Update: It opens the master registrations.xlsx file and appends a new row with the student's complete information.
c. Student Notification: It sends an immediate confirmation email to the student with their application form PDF attached.
d. Queue for Faculty: It adds the paths of the generated PDFs to a temporary queue for the faculty report.

Scheduled Reporting: A node-cron scheduler runs automatically at predefined times (e.g., 12:00 PM and 9:00 PM). It gathers all documents from the queue, attaches them to a single email along with the updated Excel log, and sends a consolidated report to the faculty before clearing the queue.

3. Technologies Used
Frontend (Client-Side)
HTML5: Structures the application form and certificate templates.

CSS3: Provides all styling, layout, and formatting for a professional appearance.

JavaScript (ES6+): Powers client-side interactivity, form validation, and data submission via the Fetch API.

Backend (Server-Side)
Node.js: The core JavaScript runtime environment for the server.

Express.js: A web framework used to create the server, define the API endpoint, and serve the frontend files.

Key Node.js Libraries (NPM Packages)
Puppeteer: For high-fidelity conversion of HTML/CSS templates into PDF documents.

ExcelJS: To create and manage the master .xlsx registration log.

Nodemailer: To handle the sending of automated emails to students and faculty.

dotenv: For securely managing environment variables and credentials (e.g., email passwords).

node-cron: To schedule and automate the batched email reports for faculty.

4. System Requirements
Hardware Requirements (for running the server)
Processor: Intel Core i3 or equivalent (or better)

RAM: 4 GB or more

Storage: 500 MB of free disk space

Software Requirements
Operating System: Windows 10/11, macOS, or a Linux distribution.

Runtime Environment: Node.js (latest LTS version recommended).

Package Manager: npm (comes bundled with Node.js).

Code Editor: Visual Studio Code, Sublime Text, or similar.

Web Browser: Google Chrome, Mozilla Firefox, or Microsoft Edge.

5. Output
The system produces three primary digital artifacts for each registration:

Application Form (PDF): A filled-out, printable copy of the student's submitted application.

Example: Application-StudentName-1757496894136.pdf

Certificate (PDF): A dynamically generated, official certificate with a unique, auto-incrementing serial number.

Example: Certificate-StudentName-1757496894136.pdf

Excel Log (registrations.xlsx): The master spreadsheet is continuously updated with a new row for each student, serving as the central database.

(Screenshots of the generated PDF files and a sample of the Excel sheet would be included here.)

6. Conclusion
The Automated Enrollment System successfully digitizes and streamlines a critical institutional process. By leveraging a robust full-stack architecture, the project demonstrates how modern web technologies can be applied to solve real-world administrative challenges. The system is scalable, efficient, and significantly reduces the potential for manual error, providing a powerful foundation for future enhancements such as database integration and online payment processing.




Project Report
Automated Enrollment and Documentation System
Central Institute of Tool Design (CITD), Hyderabad
Submitted By:
[Your Name Here]

Date:
September 16, 2025

Abstract
This project presents the design and development of an Automated Student Enrollment and Documentation System, a full-stack web application built to streamline the registration process for the Central Institute of Tool Design (CITD). The system architecture is centered around a Node.js and Express.js backend that orchestrates a multi-stage workflow triggered by a single student submission via a user-friendly HTML5 form. The application automates the entire lifecycle from data entry to final documentation, solving critical administrative bottlenecks.

The project leverages a suite of powerful server-side libraries for its core functionalities. Puppeteer is utilized for high-fidelity, dynamic PDF generation of both student certificates and application forms, ensuring pixel-perfect document rendering. ExcelJS provides persistent data logging by creating and updating a master registration spreadsheet, while Nodemailer handles all automated email communications. A key innovation is the implementation of a node-cron based scheduling agent, which consolidates all faculty notifications into batched email reports sent at predefined daily intervals, preventing email fatigue and improving administrative efficiency.

This project successfully demonstrates a robust and scalable solution for a real-world institutional workflow challenge. By automating document creation, data management, and communication, the system significantly reduces manual workload, minimizes human error, and ensures timely, professional correspondence. The Automated Enrollment System serves as a powerful model for digitizing and streamlining administrative processes in educational and corporate environments.

1. Introduction & Objectives
The traditional method of student registration at many institutions relies on manual, paper-based processes. This approach is often time-consuming, prone to human error, and results in significant administrative overhead. The primary goal of this project was to address these challenges at CITD by developing a comprehensive, automated solution.

The key objectives of the Automated Enrollment System are:

To Digitize Data Entry: Replace the physical application form with a user-friendly, public-facing web form accessible on any device.

To Automate Document Generation: Instantly create professional, pixel-perfect PDF copies of the student's official certificate and their completed application form.

To Centralize Record-Keeping: Automatically update a master Excel spreadsheet with every new registration, creating a persistent and easily accessible database.

To Streamline Communication:

Provide immediate email confirmation to students upon successful registration.

Implement an intelligent batching system to send consolidated reports to faculty at scheduled times, preventing email overload.

To Enhance Efficiency: Drastically reduce the manual workload for administrative staff, minimize data entry errors, and ensure all parties receive consistent, timely documentation.

2. System Architecture and Workflow
The application operates on a modern client-server model. The entire workflow is automated and triggered by a single user action.

Workflow Diagram:

The process is as follows:

Student Submission: A student accesses the application form via a web link and fills in their details, including personal information, educational qualifications, and a photograph.

Data Transmission: Upon submission, the frontend JavaScript captures all form data and sends it securely to the backend server.

Backend Processing: The Node.js server receives the data and initiates a multi-stage process:
a. PDF Generation: It uses Puppeteer to create two PDF files: the certificate and the application form, dynamically populating them with the student's data.
b. Database Update: It opens the master registrations.xlsx file and appends a new row with the student's complete information.
c. Student Notification: It sends an immediate confirmation email to the student with their application form PDF attached.
d. Queue for Faculty: It adds the paths of the generated PDFs to a temporary queue for the faculty report.

Scheduled Reporting: A node-cron scheduler runs automatically at predefined times (e.g., 12:00 PM and 9:00 PM). It gathers all documents from the queue, attaches them to a single email along with the updated Excel log, and sends a consolidated report to the faculty before clearing the queue.

3. Technologies Used
Frontend (Client-Side)
HTML5: Structures the application form and certificate templates.

CSS3: Provides all styling, layout, and formatting for a professional appearance.

JavaScript (ES6+): Powers client-side interactivity, form validation, and data submission via the Fetch API.

Backend (Server-Side)
Node.js: The core JavaScript runtime environment for the server.

Express.js: A web framework used to create the server, define the API endpoint, and serve the frontend files.

Key Node.js Libraries (NPM Packages)
Puppeteer: For high-fidelity conversion of HTML/CSS templates into PDF documents.

ExcelJS: To create and manage the master .xlsx registration log.

Nodemailer: To handle the sending of automated emails to students and faculty.

dotenv: For securely managing environment variables and credentials (e.g., email passwords).

node-cron: To schedule and automate the batched email reports for faculty.

4. System Requirements
Hardware Requirements (for running the server)
Processor: Intel Core i3 or equivalent (or better)

RAM: 4 GB or more

Storage: 500 MB of free disk space

Software Requirements
Operating System: Windows 10/11, macOS, or a Linux distribution.

Runtime Environment: Node.js (latest LTS version recommended).

Package Manager: npm (comes bundled with Node.js).

Code Editor: Visual Studio Code, Sublime Text, or similar.

Web Browser: Google Chrome, Mozilla Firefox, or Microsoft Edge.

5. Output
The system produces three primary digital artifacts for each registration:

Application Form (PDF): A filled-out, printable copy of the student's submitted application.

Example: Application-StudentName-1757496894136.pdf

Certificate (PDF): A dynamically generated, official certificate with a unique, auto-incrementing serial number.

Example: Certificate-StudentName-1757496894136.pdf

Excel Log (registrations.xlsx): The master spreadsheet is continuously updated with a new row for each student, serving as the central database.

(Screenshots of the generated PDF files and a sample of the Excel sheet would be included here.)

6. Conclusion
The Automated Enrollment System successfully digitizes and streamlines a critical institutional process. By leveraging a robust full-stack architecture, the project demonstrates how modern web technologies can be applied to solve real-world administrative challenges. The system is scalable, efficient, and significantly reduces the potential for manual error, providing a powerful foundation for future enhancements such as database integration and online payment processing.
